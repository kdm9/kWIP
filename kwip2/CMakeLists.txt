CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(kwip2)

###############
# Cmake Blerg #
###############

# Find the modules
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# Set sane output paths
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/lib)


ENABLE_TESTING()

# Default to Release builds
IF (NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release)
ENDIF()


# Version jiggery-pokery
IF ("${KWIP_VERSION}")  # Manually set the version
	SET(VERSION "${KWIP_VERSION}")
ELSE()
        # git describe as versioning
        EXECUTE_PROCESS(COMMAND git describe --always
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        OUTPUT_VARIABLE VERSION
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF()

MESSAGE(STATUS "${CMAKE_BUILD_TYPE} build of ${PROJECT_NAME} version: ${VERSION}")

############################
## User-definable options ##
############################

OPTION(ENABLE_ASAN "Build with AddressSanitizer" OFF)
OPTION(ENABLE_TSAN "Build with ThreadSanitizer" OFF)
OPTION(USE_OPENMP "Use OpenMP for parallelism" ON)

###############################
## Find Packages and Headers ##
###############################

#SET(HDF5_USE_STATIC_LIBRARIES ON)
FIND_PACKAGE(HDF5 REQUIRED)
SET(KWIP_DEP_INCLUDES ${KWIP_DEP_INCLUDES} ${HDF5_INCLUDE_DIRS})
SET(KWIP_DEP_LIBS ${KWIP_DEP_LIBS} ${HDF5_C_LIBRARIES})

FIND_PACKAGE(ZLIB 1.2.3 REQUIRED)
SET(KWIP_DEP_CFLAGS "${KWIP_DEP_CFLAGS} ${ZLIB_C_FLAGS}")
SET(KWIP_DEP_INCLUDES ${KWIP_DEP_INCLUDES} ${ZLIB_INCLUDE_DIRS})
SET(KWIP_DEP_LIBS ${KWIP_DEP_LIBS} ${ZLIB_LIBRARIES})

FIND_PACKAGE(GSL REQUIRED)
SET(KWIP_DEP_CFLAGS "${KWIP_DEP_CFLAGS} ${GSL_C_FLAGS}")
SET(KWIP_DEP_INCLUDES ${KWIP_DEP_INCLUDES} ${GSL_INCLUDE_DIRS})
SET(KWIP_DEP_LIBS ${KWIP_DEP_LIBS} ${GSL_LIBRARIES})

FIND_PACKAGE(Threads REQUIRED)
SET(KWIP_DEP_LIBS ${KWIP_DEP_LIBS} ${CMAKE_THREAD_LIBS_INIT})

FIND_PACKAGE(OpenMP REQUIRED)
SET(KWIP_DEP_CFLAGS "${KWIP_DEP_CFLAGS} ${OpenMP_C_FLAGS}")


SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${KWIP_DEP_CFLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${KWIP_DEP_CFLAGS}")

##########################
## Set Compiler Options ##
##########################

# Set CFLAGS
SET(WARN_FLAGS "${WARN_FLAGS} -Wall -Wextra -Wno-ignored-qualifiers")
SET(OPT_FLAGS "${OPT_FLAGS} -march=native")

SET(REL_OPT_FLAGS "-O3")

IF(ENABLE_ASAN AND ENABLE_TSAN)
    MESSAGE(FATAL_ERROR "Cannot enable both ThreadSanitizer and AddressSanitizer")
ENDIF()

IF(ENABLE_ASAN)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
ENDIF()

IF(ENABLE_TSAN)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread -fPIC -pie")
ENDIF()

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 ${WARN_FLAGS} ${OPT_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 ${WARN_FLAGS} ${OPT_FLAGS}")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${REL_OPT_FLAGS}")

# Headers occur in these dirs
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}
                    ${CMAKE_SOURCE_DIR}/src
                    ${KWIP_DEP_INCLUDES})

# Finally, configure the config header
#CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/src/kwip-config.hh.in
#               ${CMAKE_BINARY_DIR}/kwip-config.hh)

SET(DEACTIVATE_SNAPPY ON CACHE BOOL "")
SET(DEACTIVATE_ZSTD ON CACHE BOOL "")
SET(DEACTIVATE_ZLIB ON CACHE BOOL "")
SET(BUILD_SHARED OFF CACHE BOOL "")
SET(BUILD_TESTS OFF CACHE BOOL "")
SET(BUILD_BENCHMARKS OFF CACHE BOOL "")
ADD_SUBDIRECTORY(src/ext/blosc)

# Libary sources
ADD_SUBDIRECTORY(src)
#ADD_SUBDIRECTORY(tests)
